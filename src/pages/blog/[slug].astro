---
import Layout from '../../layouts/Layout.astro';
import { getBlogPost, getBlogPosts } from '../../lib/contentful';
import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import type { Document } from '@contentful/rich-text-types';
import type { Asset, Entry } from 'contentful';
import '../../styles/blog.css';

type Author = {
  sys: {
    id: string;
    type: string;
  };
  fields: {
    name: string;
    title: string;
    image: Asset;
  };
};

// This generates the static paths for all blog posts
export async function getStaticPaths() {
  const posts = await getBlogPosts();
  return posts.map((post) => ({
    params: { slug: post.slug },
  }));
}

const { slug } = Astro.params;
const post = await getBlogPost(slug ?? '');

if (!post) {
  return Astro.redirect('/404');
}

const { title, content, author, publishDate, featuredImage, excerpt } = post;
const typedAuthor = author as Author;

// Convert rich text to HTML
const contentHtml = documentToHtmlString(content as Document);
---

<style>
  /* Target paragraphs in blog content */
  .blog-content p {
    margin-bottom: 2em !important;
  }
  /* Ensure empty paragraphs maintain spacing */
  .blog-content p:empty {
    display: block !important;
    height: 2em !important;
  }
</style>

<Layout 
  title={`${title} - Justice & Associates`} 
  description={excerpt}
>
  <article class="container mx-auto px-6 py-12">
    {featuredImage?.fields?.file?.url && (
      <img 
        src={`https:${featuredImage.fields.file.url}?w=1200&h=600&fit=fill`}
        alt={title}
        class="w-full h-[400px] object-cover rounded-lg mb-8"
      />
    )}
    
    <div class="max-w-3xl mx-auto">
      <h1 class="text-4xl font-bold mb-6">{title}</h1>
      
      {typedAuthor && typedAuthor.fields && (
        <div class="flex items-center mb-8">
          {typedAuthor.fields.image?.fields?.file?.url && (
            <img 
              src={`https:${typedAuthor.fields.image.fields.file.url}?w=60&h=60&fit=fill`}
              alt={typedAuthor.fields.name}
              class="w-14 h-14 rounded-full mr-4"
            />
          )}
          <div>
            <p class="font-semibold">{typedAuthor.fields.name}</p>
            {typedAuthor.fields.title && (
              <p class="text-gray-600">{typedAuthor.fields.title}</p>
            )}
            {publishDate && (
              <p class="text-sm text-gray-500">
                {new Date(publishDate).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </p>
            )}
          </div>
        </div>
      )}
      
      <div class="prose prose-lg max-w-none" set:html={contentHtml} />
    </div>
  </article>
</Layout>
